{
	"Foreign Key Constraint": {
		"prefix": "mg-foreign-key",
		"body": [
			"sequelize.addConstraint('$1',{",
			"name: $2,",
			"type: 'foreign key',",
			"fields: ['$3'],",
			"references:{",
			"  table:'$4',",
			"  field:'$5',",
			"},",
			"onUpdate: '$6',",
			"onDelete: '$7'",
			"});"
		],
		"description": "Foreign Key Constraint",
		"scope": "typescript,javascript"
	},
	"Primary Key": {
		"prefix": "mg-primary-key",
		"body": [
			"$1:{",
			"type: DataType.BIGINT",
			"autoIncrement: true",
			"primaryKey: true"
		],
		"scope": "typescript,javascript",
		"description": "Primary Key for sequelize + postgresql"
	},
	"Created and Updated at": {
		"prefix": "mg-created-updated-at",
		"body": [
		  " createdAt: {",
		  "            type: DataType.DATE,",
		  "            allowNull: false",
		  "        },",
		  "        updatedAt: {",
		  "            type: DataType.DATE,",
		  "            allowNull: false",
		  "        }"
		],
		"description": "Created and Updated at"
	  },
	  "Create new table": {
		"prefix": "mg-new-table",
		"body": [
		  "sequelize.createTable('$1', {",
		  "        $2: {",
		  "            type: DataType.BIGINT,",
		  "            primaryKey: true,",
		  "            autoIncrement: true",
		  "        },",
		  "        createdAt: {",
		  "            type: DataType.DATE,",
		  "            allowNull: false",
		  "        },",
		  "        updatedAt: {",
		  "            type: DataType.DATE,",
		  "            allowNull: false",
		  "        }",
		  "    });"
		],
		"description": "Create new table"
	  },
	  "New Migrations": {
		"prefix": "mg-new-migration",
		"body": [
		  "import { DataType } from \"sequelize-typescript\";",
		  "import { Migration } from \"../src/app\";",
		  "",
		  "export const up: Migration = async({context: sequelize})=>{",
		  "    return $1",
		  "}",
		  "",
		  "export const down: Migration = async ({context: sequelize})=>{",
		  "    return $2",
		  "}"
		],
		"description": "New Migrations"
		}
	// Place your enterprise-backend workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
}